/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/controllers/application_controller.ts":
/*!***************************************************!*\
  !*** ./src/controllers/application_controller.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Controller = void 0;\nvar application_view_1 = __webpack_require__(/*! ../views/application_view */ \"./src/views/application_view.ts\");\nvar Table_1 = __webpack_require__(/*! ../models/Table */ \"./src/models/Table.ts\");\nvar sleep_1 = __webpack_require__(/*! ../utils/sleep */ \"./src/utils/sleep.ts\");\n// tableを操作してゲームを進める\nvar Controller = /** @class */ (function () {\n    function Controller() {\n        this.user = null;\n        this.dealer = null;\n        this.AIsAndUser = [];\n        this.view = new application_view_1.View(this);\n        this.view.renderStartPage();\n        this.table = null;\n    }\n    Controller.prototype.startGame = function (name, gameType) {\n        if (gameType === 'porker') {\n            alert('近日公開！！（多分）');\n            return;\n        }\n        if (name === '')\n            name = 'User';\n        this.table = new Table_1.Table('blackjack', [5, 10, 50, 100], name);\n        var dealer = this.table.players.find(function (player) { return player.type === 'house'; });\n        var AIsAndUser = this.table.players.filter(function (player) { return player.type !== 'house'; });\n        var user = this.table.players.find(function (player) { return player.type === 'user'; });\n        if (!dealer || !user || !AIsAndUser) {\n            console.log('error in startGame');\n            return;\n        }\n        this.dealer = dealer;\n        this.AIsAndUser = AIsAndUser;\n        this.user = user;\n        this.view.renderTableMock(this.table);\n        this.haveTurn();\n    };\n    // gamePhaseによって処理を分けて行う\n    Controller.prototype.haveTurn = function () {\n        if (!this.table)\n            return;\n        var table = this.table;\n        if (table.gamePhase === 'betting') {\n            this.view.renderTable(table);\n        }\n        else if (table.gamePhase === 'acting') {\n            this.view.renderTable(table);\n            this.handleActingPhase();\n        }\n        else if (table.gamePhase === 'evaluatingWinner') {\n            var _a = this.table.evaluateWinner(), userResult = _a.userResult, resultLog = _a.resultLog;\n            this.view.renderLogs(resultLog);\n            this.view.renderUserResultModal(userResult);\n            this.table.resetTable();\n            this.table.checkIsGameOver();\n            this.table.proceedGamePhase();\n            this.table.proceedActionPhase();\n        }\n        else if (table.gamePhase === 'gameOver') {\n            // TODO\n        }\n        table.turnCounter++;\n    };\n    Controller.prototype.nextGame = function () {\n        this.haveTurn();\n    };\n    // userがbetを決定すると呼ばれる\n    // AI, Userのベット額を決定\n    Controller.prototype.handleBetPhase = function (userBetMoney) {\n        var _this = this;\n        if (!this.table)\n            return;\n        this.table.players.forEach(function (player) {\n            var _a, _b;\n            if (player.type === 'house')\n                return;\n            else if (player.type === 'ai')\n                (_a = _this.table) === null || _a === void 0 ? void 0 : _a.betAI(player);\n            else if (player.type === 'user')\n                (_b = _this.table) === null || _b === void 0 ? void 0 : _b.betUser(player, userBetMoney);\n        });\n        this.table.proceedGamePhase();\n        this.haveTurn();\n    };\n    Controller.prototype.handleActingPhase = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var AIs, user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.table || !this.dealer) {\n                            console.log('error in handleActionPhase');\n                            return [2 /*return*/];\n                        }\n                        if (!(this.table.actionPhase === 'assignCards')) return [3 /*break*/, 1];\n                        this.assignInitialHands(this.dealer, this.AIsAndUser);\n                        return [3 /*break*/, 18];\n                    case 1:\n                        if (!(this.table.actionPhase === 'userAndAIAction')) return [3 /*break*/, 10];\n                        AIs = this.AIsAndUser.filter(function (player) { return player.type === 'ai'; });\n                        user = this.AIsAndUser.find(function (player) { return player.type === 'user'; });\n                        if (!AIs || !user)\n                            return [2 /*return*/];\n                        if (!!AIs[0].isGameOver) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.decideAIAction(AIs[0])];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        if (!!AIs[1].isGameOver) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.decideAIAction(AIs[1])];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 6:\n                        _a.sent();\n                        return [4 /*yield*/, this.view.renderOperaion()];\n                    case 7:\n                        _a.sent();\n                        if (!user.isBlackJack()) return [3 /*break*/, 9];\n                        return [4 /*yield*/, this.view.updateOperation(user)];\n                    case 8:\n                        _a.sent();\n                        this.table.proceedActionPhase();\n                        this.handleActingPhase();\n                        _a.label = 9;\n                    case 9: return [3 /*break*/, 18];\n                    case 10:\n                        if (!(this.table.actionPhase === 'dealerAction')) return [3 /*break*/, 18];\n                        return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 11:\n                        _a.sent();\n                        return [4 /*yield*/, this.table.faceUpCards(this.dealer)];\n                    case 12:\n                        _a.sent();\n                        return [4 /*yield*/, this.view.renderCards(this.dealer)];\n                    case 13:\n                        _a.sent();\n                        return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 14:\n                        _a.sent();\n                        return [4 /*yield*/, this.decideDealerAction(this.dealer)];\n                    case 15:\n                        _a.sent();\n                        return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 16:\n                        _a.sent();\n                        return [4 /*yield*/, this.table.proceedGamePhase()];\n                    case 17:\n                        _a.sent();\n                        this.haveTurn();\n                        _a.label = 18;\n                    case 18: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Controller.prototype.assignInitialHands = function (dealer, AIsAndUser) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.table)\n                            return [2 /*return*/];\n                        // playerにカードを配る\n                        return [4 /*yield*/, this.table.blackjackAssignPlayerHands()];\n                    case 1:\n                        // playerにカードを配る\n                        _a.sent();\n                        // 配ったカードをレンダリング\n                        if (!dealer)\n                            return [2 /*return*/];\n                        return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.view.renderCards(dealer)];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, AIsAndUser.forEach(function (player) {\n                                _this.view.renderCards(player);\n                            })];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, AIsAndUser.forEach(function (player) {\n                                if (player.isBlackJack()) {\n                                    _this.view.updateStatus(player, 'blackjack');\n                                }\n                            })];\n                    case 6:\n                        _a.sent();\n                        this.table.proceedActionPhase();\n                        this.handleActingPhase();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Controller.prototype.decideAIAction = function (AI) {\n        return __awaiter(this, void 0, void 0, function () {\n            var score;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // TODO: AIのアクションの決定, double, surrender\n                    // 初手が16以上ならstand\n                    return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 1:\n                        // TODO: AIのアクションの決定, double, surrender\n                        // 初手が16以上ならstand\n                        _a.sent();\n                        if (AI.getHandScore() >= 16) {\n                            this.handleAiAndDealerAction('stand', AI);\n                            return [2 /*return*/];\n                        }\n                        _a.label = 2;\n                    case 2:\n                        if (!!this.handleAiAndDealerAction('hit', AI)) return [3 /*break*/, 6];\n                        score = AI.getHandScore();\n                        return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 3:\n                        _a.sent();\n                        if (!(score > 16)) return [3 /*break*/, 5];\n                        this.handleAiAndDealerAction('stand', AI);\n                        return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 4:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 5: return [3 /*break*/, 2];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Controller.prototype.decideDealerAction = function (Dealer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var score;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Dealerは17以上までhit\n                    return [4 /*yield*/, (0, sleep_1.sleep)(1000)];\n                    case 1:\n                        // Dealerは17以上までhit\n                        _a.sent();\n                        if (Dealer.getHandScore() >= 17) {\n                            this.handleAiAndDealerAction('stand', Dealer);\n                            return [2 /*return*/];\n                        }\n                        _a.label = 2;\n                    case 2:\n                        if (!!this.handleAiAndDealerAction('hit', Dealer)) return [3 /*break*/, 6];\n                        score = Dealer.getHandScore();\n                        return [4 /*yield*/, (0, sleep_1.sleep)(2000)];\n                    case 3:\n                        _a.sent();\n                        if (!(score >= 17)) return [3 /*break*/, 5];\n                        this.handleAiAndDealerAction('stand', Dealer);\n                        return [4 /*yield*/, (0, sleep_1.sleep)(2000)];\n                    case 4:\n                        _a.sent();\n                        return [3 /*break*/, 6];\n                    case 5: return [3 /*break*/, 2];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Userのアクションを行う\n    Controller.prototype.handleUserAction = function (actionType) {\n        if (!this.user)\n            return;\n        if (!this.table)\n            return;\n        var player = this.user;\n        if (actionType === 'stand') {\n            this.table.actionAndReturnIsBust(player, actionType);\n            // update view\n            this.view.updateStatus(player, actionType);\n            // 次に進む\n            this.view.updateOperation(player);\n            this.table.proceedActionPhase();\n            this.handleActingPhase();\n        }\n        else if (actionType === 'hit') {\n            var isBust = this.table.actionAndReturnIsBust(player, actionType);\n            // update view\n            this.view.updateStatus(player, actionType);\n            this.view.renderCards(player);\n            if (isBust) {\n                // update view\n                this.view.updateStatus(player, 'bust');\n                // 次に進む\n                this.view.updateOperation(player);\n                this.table.proceedActionPhase();\n                this.handleActingPhase();\n            }\n            else {\n                this.view.updateOperation(player);\n                // scoreが21の時はstandして次のフェーズに\n                if (this.user.getHandScore() === 21) {\n                    this.view.updateStatus(player, 'stand');\n                    this.table.proceedActionPhase();\n                    this.handleActingPhase();\n                }\n            }\n        }\n        else if (actionType === 'surrender') {\n            this.table.actionAndReturnIsBust(player, actionType);\n            this.view.updateStatus(player, actionType);\n            // update view\n            this.view.updateChips(player);\n            this.view.updateBet(player);\n            // 次に進む\n            this.view.updateOperation(player);\n            this.table.proceedActionPhase();\n            this.handleActingPhase();\n        }\n        else {\n            var isBust = this.table.actionAndReturnIsBust(player, actionType);\n            this.view.updateStatus(player, actionType);\n            // update view\n            this.view.updateChips(player);\n            this.view.renderCards(player);\n            this.view.updateBet(player);\n            this.view.updateOperation(player);\n            if (isBust) {\n                // update view\n                this.view.updateStatus(player, 'bust');\n                // 次に進む\n                this.table.proceedActionPhase();\n                this.handleActingPhase();\n            }\n            else {\n                // 次に進む\n                this.table.proceedActionPhase();\n                this.handleActingPhase();\n            }\n        }\n    };\n    // AIとDealerのアクションを行う, bustしたかどうかを返す\n    Controller.prototype.handleAiAndDealerAction = function (actionType, AI) {\n        if (!this.table)\n            return false;\n        if (actionType === 'stand') {\n            this.table.actionAndReturnIsBust(AI, actionType);\n            this.view.updateStatus(AI, actionType);\n            return false;\n        }\n        else if (actionType === 'hit') {\n            var isBust = this.table.actionAndReturnIsBust(AI, actionType);\n            this.view.updateStatus(AI, actionType);\n            this.view.renderCards(AI);\n            if (isBust) {\n                this.view.updateStatus(AI, 'bust');\n            }\n            return isBust;\n        }\n        else if (actionType === 'surrender') {\n            this.table.actionAndReturnIsBust(AI, actionType);\n            this.view.updateStatus(AI, actionType);\n            this.view.updateChips(AI);\n            this.view.updateBet(AI);\n            return false;\n        }\n        else {\n            var isBust = this.table.actionAndReturnIsBust(AI, actionType);\n            this.view.updateStatus(AI, actionType);\n            this.view.updateChips(AI);\n            this.view.renderCards(AI);\n            this.view.updateBet(AI);\n            if (isBust) {\n                this.view.updateStatus(AI, 'bust');\n            }\n            return isBust;\n        }\n    };\n    return Controller;\n}());\nexports.Controller = Controller;\n\n\n//# sourceURL=webpack://brackjack/./src/controllers/application_controller.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar application_controller_1 = __webpack_require__(/*! ./controllers/application_controller */ \"./src/controllers/application_controller.ts\");\nnew application_controller_1.Controller();\n\n\n//# sourceURL=webpack://brackjack/./src/index.ts?");

/***/ }),

/***/ "./src/models/Card.ts":
/*!****************************!*\
  !*** ./src/models/Card.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Card = void 0;\nvar Card = /** @class */ (function () {\n    function Card(suit, rank) {\n        this.suit = suit;\n        this.rank = rank;\n        this.isDownCard = false;\n    }\n    // カードのランクを数値で返す\n    Card.prototype.getRankNumber = function () {\n        // Aはとりあえず11を返す\n        if (this.rank === 'A')\n            return 11;\n        else if (this.rank === 'J' || this.rank === 'Q' || this.rank === 'K') {\n            return 10;\n        }\n        return this.rank;\n    };\n    // カードを裏向きにする\n    Card.prototype.faceDown = function () {\n        this.isDownCard = true;\n    };\n    // カードを表向きにする\n    Card.prototype.faceUp = function () {\n        this.isDownCard = false;\n    };\n    return Card;\n}());\nexports.Card = Card;\n\n\n//# sourceURL=webpack://brackjack/./src/models/Card.ts?");

/***/ }),

/***/ "./src/models/Deck.ts":
/*!****************************!*\
  !*** ./src/models/Deck.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Deck = void 0;\nvar Card_1 = __webpack_require__(/*! ./Card */ \"./src/models/Card.ts\");\nvar Deck = /** @class */ (function () {\n    function Deck(gameType) {\n        this.gameType = gameType;\n        this.cards = [];\n        this.resetDeck();\n    }\n    // デッキをリセットしてシャッフルする\n    Deck.prototype.resetDeck = function () {\n        var _this = this;\n        this.cards.length = 0;\n        var suits = ['H', 'S', 'C', 'D'];\n        suits.forEach(function (suit) {\n            var _a;\n            (_a = _this.cards).push.apply(_a, [new Card_1.Card(suit, 'A'), new Card_1.Card(suit, 1), new Card_1.Card(suit, 2), new Card_1.Card(suit, 3), new Card_1.Card(suit, 4), new Card_1.Card(suit, 5), new Card_1.Card(suit, 6), new Card_1.Card(suit, 7), new Card_1.Card(suit, 8), new Card_1.Card(suit, 9), new Card_1.Card(suit, 10), new Card_1.Card(suit, 'J'), new Card_1.Card(suit, 'Q'), new Card_1.Card(suit, 'K')]);\n        });\n        this.shuffle();\n        console.log(this.cards);\n    };\n    // TODO: バグあるかも、シャッフルできてない？\n    Deck.prototype.shuffle = function () {\n        var _a;\n        for (var i = this.cards.length; 1 < i; i--) {\n            var k = Math.floor(Math.random() * i);\n            _a = [this.cards[i - 1], this.cards[k]], this.cards[k] = _a[0], this.cards[i - 1] = _a[1];\n        }\n        console.log(this.cards);\n    };\n    // 先頭のカードを返す\n    Deck.prototype.drawOne = function () {\n        return this.cards.pop();\n    };\n    return Deck;\n}());\nexports.Deck = Deck;\n\n\n//# sourceURL=webpack://brackjack/./src/models/Deck.ts?");

/***/ }),

/***/ "./src/models/Player.ts":
/*!******************************!*\
  !*** ./src/models/Player.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Player = void 0;\nvar Player = /** @class */ (function () {\n    function Player(name, type, gameType, chips) {\n        this.name = name;\n        this.type = type;\n        this.gameType = gameType;\n        this.chips = chips;\n        this.betAmount = 0;\n        this.hand = [];\n        this.status = null;\n        this.isGameOver = false;\n    }\n    Player.prototype.isBlackJack = function () {\n        return this.getHandScore() === 21 && this.hand.length === 2;\n    };\n    Player.prototype.getHandScore = function () {\n        var score = 0;\n        this.hand.forEach(function (card) {\n            score += card.getRankNumber();\n        });\n        if (score > 21) {\n            var numOfA = this.hand.filter(function (card) { return card.rank === 'A'; }).length;\n            for (var i = 1; i <= numOfA; i++) {\n                if (score <= 21)\n                    return score;\n                score -= 10;\n            }\n        }\n        return score;\n    };\n    return Player;\n}());\nexports.Player = Player;\n\n\n//# sourceURL=webpack://brackjack/./src/models/Player.ts?");

/***/ }),

/***/ "./src/models/Table.ts":
/*!*****************************!*\
  !*** ./src/models/Table.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Table = void 0;\nvar Player_1 = __webpack_require__(/*! ./Player */ \"./src/models/Player.ts\");\nvar Deck_1 = __webpack_require__(/*! ./Deck */ \"./src/models/Deck.ts\");\nvar Table = /** @class */ (function () {\n    function Table(gameType, betDenomination, name) {\n        this.gameType = gameType;\n        this.betDenomination = betDenomination;\n        this.turnCounter = 0;\n        this.gamePhase = 'betting';\n        this.actionPhase = 'assignCards';\n        this.resultLog = [];\n        this.userResult = '';\n        this.deck = new Deck_1.Deck('blackjack');\n        this.players = [new Player_1.Player(name, 'user', 'blackjack', 400), new Player_1.Player('AI1', 'ai', 'blackjack', 400), new Player_1.Player('AI2', 'ai', 'blackjack', 400), new Player_1.Player('Dealer', 'house', 'blackjack')];\n    }\n    // playerにカードを２枚づつ配る\n    Table.prototype.blackjackAssignPlayerHands = function () {\n        var _this = this;\n        this.players.forEach(function (player) {\n            if (player.isGameOver)\n                return;\n            var card1 = _this.deck.drawOne();\n            var card2 = _this.deck.drawOne();\n            if (card1 && card2) {\n                if (player.type === 'house') {\n                    card2.faceDown();\n                }\n                player.hand.push(card1, card2);\n            }\n            if (player.isBlackJack())\n                player.status = 'blackjack';\n        });\n    };\n    // プレイヤーのハンドとステータスをリセットする\n    Table.prototype.blackjackClearPlayerHandsAndStatusAndBetAmount = function () {\n        this.players.forEach(function (player) {\n            player.hand = [];\n            player.betAmount = 0;\n            player.status = null;\n        });\n    };\n    /*\n    - delaerがBJ\n      - playerがBJ\n        += betAmount\n      - playerがBJでない\n        chipsそのまま(betAmountだけ減る)\n    - dealerがbust || playerの勝ち\n      - playerがBJ\n        += 2.5 * betAmount\n      - playerがBJでない\n        += 2 * betAmount\n    - dealerがbustしてない && dealerの勝ち\n      - playerがdouble\n      - playerがstand\n        chipそのまま\n    */\n    Table.prototype.evaluateWinner = function () {\n        var _this = this;\n        var dealer = this.players.find(function (player) { return player.type === 'house'; });\n        var AIsAndUser = this.players.filter(function (player) { return player.type !== 'house'; });\n        if (!dealer)\n            return { userResult: 'error', resultLog: ['error'] };\n        var dealerScore = dealer.getHandScore();\n        var isDealerBust = dealer.status === 'bust';\n        var isDealerBJ = dealer.status === 'blackjack';\n        AIsAndUser.forEach(function (player) {\n            if (player.status === 'surrender') {\n                return;\n            }\n            if (player.chips === undefined || player.chips === null)\n                return;\n            var playerScore = player.getHandScore();\n            var isPlayerBust = player.status === 'bust';\n            var isPlayerBJ = player.status === 'blackjack';\n            if (isDealerBJ) {\n                if (isPlayerBJ) {\n                    // dealer, playerともにBJ => 変化なし(betAmountが戻る)\n                    if (player.type === 'user')\n                        _this.userResult = player.name + \" push\";\n                    _this.resultLog.push(player.name + \" push\");\n                    player.chips += player.betAmount;\n                }\n                else {\n                    // dealerがBJ, playerがBJでない => betAmount分減る(chipsそのまま)\n                    if (player.type === 'user')\n                        _this.userResult = player.name + \" lose \" + player.betAmount;\n                    _this.resultLog.push(player.name + \" lose \" + player.betAmount);\n                    player.betAmount = 0;\n                }\n            }\n            else if (isDealerBust || (!isPlayerBust && dealerScore < playerScore)) {\n                if (isPlayerBJ) {\n                    //  1.5 * betAmount勝ち (+= 2.5*betAmount)\n                    if (player.type === 'user')\n                        _this.userResult = player.name + \" win \" + player.betAmount * 1.5;\n                    _this.resultLog.push(player.name + \" win \" + player.betAmount * 1.5);\n                    player.chips += 2.5 * player.betAmount;\n                    player.betAmount = 0;\n                    return;\n                }\n                else {\n                    //  1.5 * betAmount勝ち (+= 2.5*betAmount)\n                    if (player.type === 'user')\n                        _this.userResult = player.name + \" win \" + player.betAmount;\n                    _this.resultLog.push(player.name + \" win \" + player.betAmount);\n                    player.chips += 2 * player.betAmount;\n                    player.betAmount = 0;\n                    return;\n                }\n            }\n            else if (!isDealerBust && (isPlayerBust || dealerScore > playerScore)) {\n                if (player.type === 'user')\n                    _this.userResult = player.name + \" lose \" + player.betAmount;\n                _this.resultLog.push(player.name + \" lose \" + player.betAmount);\n                player.betAmount = 0;\n                return;\n            }\n            else {\n                // push\n                if (player.type === 'user')\n                    _this.userResult = player.name + \" push\";\n                _this.resultLog.push(player.name + \" push\");\n                if (player.status === 'double') {\n                    player.chips += Math.round(player.betAmount / 2);\n                    player.betAmount = 0;\n                }\n                player.chips += player.betAmount;\n                player.betAmount = 0;\n                return;\n            }\n        });\n        return { userResult: this.userResult, resultLog: this.resultLog };\n    };\n    // phaseを進める\n    Table.prototype.proceedGamePhase = function (isUserGameOver) {\n        if (this.gamePhase === 'betting')\n            this.gamePhase = 'acting';\n        else if (this.gamePhase === 'acting')\n            this.gamePhase = 'evaluatingWinner';\n        else if (this.gamePhase === 'evaluatingWinner') {\n            if (isUserGameOver)\n                this.gamePhase = 'gameOver';\n            else\n                this.gamePhase = 'betting';\n        }\n    };\n    Table.prototype.proceedActionPhase = function () {\n        if (this.actionPhase === 'assignCards')\n            this.actionPhase = 'dealerAction';\n        else if (this.actionPhase === 'dealerAction')\n            this.actionPhase = 'userAndAIAction';\n        else\n            this.actionPhase = 'assignCards';\n    };\n    Table.prototype.betUser = function (user, betMoney) {\n        if (!user.chips)\n            return;\n        user.betAmount = betMoney;\n        user.chips -= betMoney;\n    };\n    Table.prototype.betAI = function (ai) {\n        // console.log(ai)\n        if (!ai.chips)\n            return;\n        if (ai.chips <= 0)\n            return;\n        // TODO: AIのベット額の決め方\n        var BET_MONEY = 100;\n        ai.betAmount = BET_MONEY;\n        ai.chips -= BET_MONEY;\n    };\n    // ActionののちBustかどうかを返す。\n    Table.prototype.actionAndReturnIsBust = function (player, type) {\n        if (type === 'stand') {\n            player.status = type;\n            return false;\n        }\n        else if (type === 'hit') {\n            player.status = type;\n            var newCard = this.deck.drawOne();\n            player.hand.push(newCard);\n            if (player.getHandScore() > 21) {\n                player.status = 'bust';\n                return true;\n            }\n            else if (player.getHandScore() === 21) {\n                player.status = 'stand';\n                return false;\n            }\n            else {\n                return false;\n            }\n        }\n        else if (type === 'surrender') {\n            player.status = type;\n            if (!player.chips) {\n                console.log('error in actionAndReturnIsBust');\n                return false;\n            }\n            if (player.type === 'user')\n                this.userResult = player.name + \" lose \" + Math.round(player.betAmount / 2);\n            this.resultLog.push(player.name + \" lose \" + Math.round(player.betAmount / 2));\n            player.chips += Math.round(player.betAmount / 2);\n            player.betAmount = 0;\n            return false;\n        }\n        else {\n            player.status = type;\n            var newCard = this.deck.drawOne();\n            player.hand.push(newCard);\n            player.betAmount *= 2;\n            if (player.getHandScore() > 21) {\n                player.status = 'bust';\n                return true;\n            }\n            else if (player.getHandScore() === 21) {\n                player.status = 'stand';\n                return false;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    // playerのハンドを表向きにする\n    Table.prototype.faceUpCards = function (player) {\n        player.hand.forEach(function (card) { return card.isDownCard && card.faceUp(); });\n    };\n    // テーブルをリセット\n    Table.prototype.resetTable = function () {\n        this.blackjackClearPlayerHandsAndStatusAndBetAmount();\n        this.deck.resetDeck();\n        this.resultLog = ['-----------'];\n    };\n    Table.prototype.checkIsGameOver = function () {\n        this.players.forEach(function (player) {\n            if (player.chips === null || player.chips === undefined)\n                return;\n            if (player.chips <= 0)\n                player.isGameOver = true;\n        });\n    };\n    return Table;\n}());\nexports.Table = Table;\n\n\n//# sourceURL=webpack://brackjack/./src/models/Table.ts?");

/***/ }),

/***/ "./src/utils/sleep.ts":
/*!****************************!*\
  !*** ./src/utils/sleep.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sleep = void 0;\nvar sleep = function (msec) { return new Promise(function (resolve) { return setTimeout(resolve, msec); }); };\nexports.sleep = sleep;\n\n\n//# sourceURL=webpack://brackjack/./src/utils/sleep.ts?");

/***/ }),

/***/ "./src/views/application_view.ts":
/*!***************************************!*\
  !*** ./src/views/application_view.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.View = void 0;\nvar View = /** @class */ (function () {\n    function View(controller) {\n        this.controller = controller;\n        this.root = document.getElementById('root');\n    }\n    View.prototype.renderStartPage = function () {\n        var _this = this;\n        this.root.innerHTML = \"\\n    <section id=\\\"start-page\\\" class=\\\"w-full h-full flex justify-center align-ce\\\">\\n        <div class=\\\"container m-auto text-center p-5\\\">\\n          <h1 class=\\\"mb-5 font-semibold text-3xl text-gray-100 tracking-tight\\\">Welcome to Card Game!</h1>\\n          <input type=\\\"text\\\" name=\\\"name\\\" id=\\\"name-input\\\" placeholder=\\\"username\\\" class=\\\"shadow mb-5 w-72 border bg-gray-100 text-gray-700 border-gray-300 py-2 pl-3 rounded-md outline-none focus:outline-none focus:bg-white focus:border-gray-500\\\" />\\n          <div class=\\\"relative w-72 m-auto mb-5\\\">\\n            <select id=\\\"game-type-select\\\" class=\\\"shadow block appearance-none w-full bg-gray-100 border border-gray-300 text-gray-700 py-3 px-4 pr-8 rounded-md leading-tight focus:outline-none focus:bg-white focus:border-gray-500\\\">\\n              <option>brackjack</option>\\n              <option>porker</option>\\n            </select>\\n            <div class=\\\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\\\">\\n              <svg class=\\\"fill-current h-4 w-4\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 20 20\\\"><path d=\\\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\\\" /></svg>\\n            </div>\\n          </div>\\n          <div>\\n            <button id=\\\"start-button\\\" class=\\\"shadow py-3 w-72 text-xl text-white bg-green-500 hover:bg-green-400 rounded-xl\\\">Start Game</button>\\n          </div>\\n        </div>\\n      </section>\\n    \";\n        var nameInput = document.getElementById('name-input');\n        var gameTypeSelect = document.getElementById('game-type-select');\n        var startBtn = document.getElementById('start-button');\n        startBtn.addEventListener('click', function () {\n            if (nameInput.value.length > 10) {\n                alert('10文字以内で入力して下さい');\n                nameInput.value = '';\n                return;\n            }\n            if (nameInput.value === 'AI1' || nameInput.value === 'AI2') {\n                alert('その名前は使うことができません');\n                nameInput.value = '';\n                return;\n            }\n            _this.controller.startGame(nameInput.value, gameTypeSelect.value);\n        });\n    };\n    View.prototype.renderTable = function (table) {\n        var _this = this;\n        var players = table.players;\n        var betDenomination = table.betDenomination;\n        var chips = 400;\n        // playerをレンダリング\n        players.forEach(function (player) {\n            if (player.type === 'house')\n                _this.renderHouse(player);\n            else if (player.type === 'ai')\n                _this.renderAI(player);\n            else {\n                if (player.chips)\n                    chips = player.chips;\n                _this.renderUser(player);\n            }\n            if (player.isGameOver) {\n                _this.updateStatus(player, null);\n            }\n        });\n        if (table.gamePhase === 'betting') {\n            // betModalをレンダリング\n            this.renderBetOperationModal(chips, betDenomination);\n        }\n        else if (table.gamePhase === 'acting') {\n            // betをレンダリング\n            this.renderBet(players);\n        }\n    };\n    View.prototype.renderTableMock = function (table) {\n        var players = table.players;\n        var ai_names = players.filter(function (player) { return player.type === 'ai'; }).map(function (player) { return player.name; });\n        this.root.innerHTML = \"\\n    <section class=\\\"w-full h-full flex justify-center align-center\\\">\\n      <div class=\\\"container m-auto text-center h-4/5\\\">\\n        <div class=\\\"h-2/6 w-full flex justify-center\\\">\\n          <div id=\\\"house-container\\\" class=\\\"h-full min:w-1/3\\\"></div>\\n        </div>\\n        <div class=\\\"h-2/6 w-full flex relative justify-between\\\">\\n          <div id=\\\"\" + ai_names[0] + \"-container\\\" class=\\\"h-full min:w-1/3\\\"></div>\\n          <div id=\\\"bet-space\\\" class=\\\"h-full absolute right-1/2 transform translate-x-1/2 w-36 flex justify-center items-center gap-0\\\"></div>\\n          <div id=\\\"\" + ai_names[1] + \"-container\\\" class=\\\"h-full min:w-1/3\\\"></div>\\n        </div>\\n        <div class=\\\"h-2/6 w-full flex justify-center\\\">\\n          <div id=\\\"user-container\\\" class=\\\"bg-green-700 h-full min:w-2/5\\\"></div>\\n        </div>\\n      </div>\\n      <div id=\\\"operation-space\\\" class=\\\"z-10 fixed pb-2 w-full bottom-0 flex justify-center gap-5 align-center\\\"></div>\\n      <div id=\\\"bet-operation-space\\\" class=\\\"hidden z-20 fixed w-1/3 h-2/3 top-36 bg-white rounded-2xl flex justify-center items-center flex-col gap-10 shadow-2xl\\\"></div>\\n      <div id=\\\"user-result-space\\\" class=\\\"hidden z-20 fixed transform -translate-y-1/2 w-1/3 h-1/3 top-1/2 bg-white rounded-2xl flex justify-center items-center flex-col gap-10 shadow-2xl\\\"></div>\\n      <div id=\\\"log\\\" class=\\\"overflow-scroll z-5 fixed pb-2 w-1/3 h-52 top-0 right-0 text-center\\\"></div>\\n    </section>\\n    \";\n    };\n    View.prototype.renderOperaion = function () {\n        var _this = this;\n        var operaionSpace = document.getElementById('operation-space');\n        if (!operaionSpace) {\n            console.log('error renderOperaion');\n            return;\n        }\n        operaionSpace.innerHTML = \"\\n    <button id=\\\"surrender\\\" class=\\\"rounded-full h-24 w-24 flex items-center justify-center bg-red-500 hover:bg-red-600 disabled:opacity-50 shadow-lg text-white text-sm\\\">SURRENDER</button>\\n    <button id=\\\"stand\\\" class=\\\"rounded-full h-24 w-24 flex items-center justify-center bg-yellow-500 hover:bg-yellow-600 disabled:opacity-50 shadow-lg text-white\\\">STAND</button>\\n    <button id=\\\"hit\\\" class=\\\"rounded-full h-24 w-24 flex items-center justify-center bg-blue-500 hover:bg-blue-600 disabled:opacity-50 shadow-lg text-white\\\">HIT</button>\\n    <button id=\\\"double\\\" class=\\\"rounded-full h-24 w-24 flex items-center justify-center bg-purple-500 hover:bg-purple-600 disabled:opacity-50 shadow-lg text-white\\\">DOUBLE</button>\\n    \";\n        var surrenderBtn = document.getElementById('surrender');\n        var standBtn = document.getElementById('stand');\n        var hitBtn = document.getElementById('hit');\n        var doubleBtn = document.getElementById('double');\n        if (!surrenderBtn || !standBtn || !hitBtn || !doubleBtn) {\n            console.log('error 130');\n            return;\n        }\n        surrenderBtn.addEventListener('click', function () {\n            _this.controller.handleUserAction('surrender');\n        });\n        standBtn.addEventListener('click', function () {\n            _this.controller.handleUserAction('stand');\n        });\n        hitBtn.addEventListener('click', function () {\n            _this.controller.handleUserAction('hit');\n        });\n        doubleBtn.addEventListener('click', function () {\n            _this.controller.handleUserAction('double');\n        });\n    };\n    View.prototype.renderBetOperationModal = function (chip, betDenomination) {\n        var _this = this;\n        var betOperationSpace = document.getElementById('bet-operation-space');\n        if (!betOperationSpace) {\n            console.log('error renderOprtionModal');\n            return;\n        }\n        var ID = { CURRENT_CHIP: 'current-chip', BET_MONEY: 'bet-money', BET_BTNS: 'bet-btns', RESET_BTN: 'reset-btn', BET_DECISION_BTN: 'bet-decision-btn' };\n        betOperationSpace.innerHTML = \"\\n          <div>\\n            <p class=\\\"text-2xl text-gray-800 font-bold\\\">You Bet <span id=\" + ID.BET_MONEY + \">0</span> </p>\\n          </div>\\n          <div class=\\\"h-auto flex justify-center items-center gap-2\\\">\\n            <span class=\\\"rounded-full h-8 w-8 flex items-center justify-center bg-yellow-600 shadow-lg text-white text-sm\\\">c</span>\\n            <span id=\" + ID.CURRENT_CHIP + \" class=\\\"text-gray-700 font-semibold\\\">\" + chip + \"</span>\\n          </div>\\n          <div id=\" + ID.BET_BTNS + \" class=\\\"h-auto flex justify-center items-center gap-2\\\">\\n          </div>\\n          <div class=\\\"p-3  mt-2 text-center space-x-4 md:block\\\">\\n            <button id=\" + ID.RESET_BTN + \" class=\\\"mb-2 md:mb-0 bg-white px-5 py-2 text-sm shadow-sm font-medium tracking-wider border text-gray-600 rounded-full hover:shadow-lg hover:bg-gray-100\\\">\\n                Reset\\n            </button>\\n            <button id=\" + ID.BET_DECISION_BTN + \" class=\\\"mb-2 md:mb-0 bg-red-500 border border-red-500 px-5 py-2 text-sm shadow-sm font-medium tracking-wider text-white rounded-full hover:shadow-lg hover:bg-red-600\\\">Bet</button>\\n          </div>\\n    \";\n        // modalを表示\n        betOperationSpace.classList.remove('hidden');\n        var currentChip = document.getElementById(ID.CURRENT_CHIP);\n        var betMoney = document.getElementById(ID.BET_MONEY);\n        var betBtns = document.getElementById(ID.BET_BTNS);\n        var resetBtn = document.getElementById(ID.RESET_BTN);\n        var betDecisionBtn = document.getElementById(ID.BET_DECISION_BTN);\n        if (!currentChip || !betMoney || !betBtns || !resetBtn || !betDecisionBtn) {\n            console.log('error in renderBetOperationModal');\n            return;\n        }\n        betDenomination.forEach(function (val) {\n            var btn = document.createElement('button');\n            btn.classList.add('rounded-full', 'h-12', 'w-12', 'flex', 'items-center', 'justify-center', 'bg-yellow-500', 'hover:bg-yellow-600', 'shadow-lg', 'text-white', 'text-sm');\n            btn.textContent = String(val);\n            btn.addEventListener('click', function () {\n                var betMoneyVal = betMoney.textContent;\n                var currentChipVal = currentChip.textContent;\n                if (!betMoneyVal || !currentChipVal)\n                    return;\n                var betMoneyNum = parseInt(betMoneyVal);\n                var currentChipNum = parseInt(currentChipVal);\n                if (currentChipNum - val < 0)\n                    return;\n                betMoney.textContent = String(betMoneyNum + val);\n                currentChip.textContent = String(currentChipNum - val);\n            });\n            betBtns.appendChild(btn);\n        });\n        resetBtn.addEventListener('click', function () {\n            betMoney.textContent = '0';\n            currentChip.textContent = String(chip);\n        });\n        betDecisionBtn.addEventListener('click', function () {\n            var betMoneyVal = betMoney.textContent;\n            if (!betMoneyVal)\n                return;\n            var betMoneyNum = parseInt(betMoneyVal);\n            if (betMoneyNum === 0)\n                return;\n            // close modal\n            betOperationSpace.classList.add('hidden');\n            _this.controller.handleBetPhase(betMoneyNum);\n        });\n    };\n    View.prototype.renderUserResultModal = function (userLog) {\n        var _this = this;\n        var userResultSpace = document.getElementById('user-result-space');\n        if (!userResultSpace) {\n            console.log('error renderUserResultModal');\n            return;\n        }\n        var NEXT_GAME_BTN = 'next_game-btn';\n        userResultSpace.innerHTML = \"\\n          <div>\\n            <p class=\\\"text-2xl text-gray-800 font-bold\\\">\" + userLog + \"</p>\\n          </div>\\n          <button id=\" + NEXT_GAME_BTN + \" class=\\\"bg-blue-500 border px-5 py-2 text-sm shadow-sm font-medium tracking-wider text-white rounded-full hover:shadow-lg hover:bg-blue-600\\\">Next Game</button>\\n    \";\n        // modalを表示\n        userResultSpace.classList.remove('hidden');\n        var nextGameBtn = document.getElementById(NEXT_GAME_BTN);\n        if (!nextGameBtn)\n            return;\n        nextGameBtn.addEventListener('click', function () {\n            userResultSpace.classList.add('hidden');\n            _this.controller.nextGame();\n        });\n    };\n    View.prototype.renderHouse = function (player) {\n        if (player.type !== 'house')\n            return;\n        var houseContainer = document.getElementById('house-container');\n        if (!houseContainer) {\n            console.log('error in renderHouse');\n            return;\n        }\n        houseContainer.innerHTML = \"\\n    <div class=\\\"mb-2\\\">\\n      <span class=\\\"shadow text-2xl inline-block bg-white rounded-full px-4 py-1 text-xl font-semibold text-gray-800\\\">\" + player.name + \"</span>\\n    </div>\\n    <div id=\\\"\" + player.name + \"-status\\\" class=\\\"h-4 flex justify-center items-center gap-2\\\">\\n    </div>\\n    <div id=\\\"\" + player.name + \"-cards-container\\\" class=\\\"flex gap-2 align-center justify-center mt-3\\\">\\n    </div>\\n    \";\n    };\n    View.prototype.renderUser = function (player) {\n        if (player.type !== 'user')\n            return;\n        var userContainer = document.getElementById('user-container');\n        if (!userContainer) {\n            console.log('error in renderUser');\n            return;\n        }\n        userContainer.innerHTML = \"\\n    <div class=\\\"mb-2\\\">\\n      <span id=\\\"user-name\\\" class=\\\"shadow text-2xl inline-block bg-white rounded-full px-4 py-1 text-xl font-semibold text-gray-800\\\">\" + player.name + \"</span>\\n    </div>\\n    <div class=\\\"h-4 flex justify-center items-center gap-2\\\">\\n      <span class=\\\"rounded-full h-4 w-4 flex items-center justify-center bg-yellow-600 shadow-lg text-white text-sm\\\">c</span>\\n      <span id=\\\"\" + player.name + \"-money\\\" class=\\\"text-white\\\">\" + player.chips + \"</span>\\n      <div id=\\\"\" + player.name + \"-status\\\">\\n      </div>\\n    </div>\\n    <div id=\\\"\" + player.name + \"-cards-container\\\" class=\\\"flex gap-2 align-center justify-center mt-3\\\">\\n    </div>\\n    \";\n    };\n    View.prototype.renderAI = function (player) {\n        if (player.type !== 'ai')\n            return;\n        var aiContainer = document.getElementById(player.name + '-container');\n        if (!aiContainer) {\n            console.log('error in renderAi');\n            return;\n        }\n        aiContainer.innerHTML = \"\\n    <div class=\\\"mb-2\\\">\\n      <span class=\\\"shadow text-2xl inline-block bg-gray-700 rounded-full px-4 py-1 text-xl font-semibold text-white\\\">\" + player.name + \"</span>\\n    </div>\\n      <div class=\\\"h-4 flex justify-center items-center gap-2\\\">\\n        <span class=\\\"rounded-full h-4 w-4 flex items-center justify-center bg-yellow-600 shadow-lg text-white text-sm\\\">c</span>\\n        <span id=\\\"\" + player.name + \"-money\\\" class=\\\"text-white\\\">\" + player.chips + \"</span>\\n        <div id=\\\"\" + player.name + \"-status\\\">\\n        </div>\\n      </div>\\n    <div id=\\\"\" + player.name + \"-cards-container\\\" class=\\\"flex gap-2 align-center justify-center mt-3\\\">\\n    </div>\\n    \";\n    };\n    // TODO: refactoring\n    View.prototype.renderBet = function (players) {\n        var betSpace = document.getElementById('bet-space');\n        if (!betSpace) {\n            console.log('error in renderBet');\n            return;\n        }\n        var user = players.find(function (player) { return player.type === 'user'; });\n        var AIs = players.filter(function (player) { return player.type === 'ai'; });\n        if (!user) {\n            console.log('error in renderBet');\n            return;\n        }\n        betSpace.innerHTML = '';\n        if (AIs[0].betAmount !== 0) {\n            betSpace.innerHTML += \"\\n      <div id=\\\"\" + AIs[0].name + \"-betmoney\\\" class=\\\"rounded-full h-12 w-12 flex items-center justify-center bg-gray-700 shadow-lg text-white text-sm\\\">\" + AIs[0].betAmount + \"</div>\\n      \";\n        }\n        if (user.betAmount !== 0) {\n            betSpace.innerHTML += \"\\n    <div id=\\\"\" + user.name + \"-betmoney\\\" class=\\\"mt-24 rounded-full h-12 w-12 flex items-center justify-center bg-white shadow-lg text-gray-800 text-sm\\\">\" + user.betAmount + \"</div>\\n    \";\n        }\n        if (AIs[1].betAmount !== 0) {\n            betSpace.innerHTML += \"\\n    <div id=\\\"\" + AIs[1].name + \"-betmoney\\\" class=\\\"rounded-full h-12 w-12 flex items-center justify-center bg-gray-700 shadow-lg text-white text-sm\\\">\" + AIs[1].betAmount + \"</div>\\n    \";\n        }\n    };\n    View.prototype.renderCards = function (player) {\n        var cardConteiner = document.getElementById(player.name + '-cards-container');\n        if (!cardConteiner) {\n            console.log('error renderInitialCards');\n            console.log(player.name);\n            return;\n        }\n        cardConteiner.innerHTML = '';\n        player.hand.forEach(function (card) {\n            var cardDiv = document.createElement('div');\n            // TODO: 条件分技が汚い\n            if (card.isDownCard) {\n                cardDiv.classList.add('relative', 'flex', 'justify-center', 'align-ceter', 'w-20', 'h-32', 'bg-gray-900', 'rounded', 'shadow', 'text-center');\n                cardDiv.innerHTML = \"\\n        <p class=\\\"text-white text-3xl m-auto\\\">?</p>\\n        \";\n            }\n            else {\n                if (player.type === 'house' || player.type === 'user') {\n                    cardDiv.classList.add('relative', 'flex', 'justify-center', 'align-ceter', 'w-20', 'h-32', 'bg-white', 'rounded', 'shadow', 'text-center');\n                    cardDiv.innerHTML = \"\\n          <img src=\\\"\" + card.suit + \".png\\\" class=\\\"h-10 m-auto\\\" />\\n          <span class=\\\"absolute top-0 left-1 text-2xl mt-2\\\">\" + card.rank + \"</span>\\n          \";\n                }\n                else if (player.type === 'ai') {\n                    cardDiv.classList.add('relative', 'flex', 'justify-center', 'align-ceter', 'w-16', 'h-24', 'bg-white', 'rounded', 'shadow', 'text-center');\n                    cardDiv.innerHTML = \"\\n          <img src=\\\"\" + card.suit + \".png\\\" class=\\\"h-8 m-auto\\\" />\\n          <span class=\\\"absolute top-0 left-1 text-xl mt-2\\\">\" + card.rank + \"</span>\\n          \";\n                }\n            }\n            cardConteiner.appendChild(cardDiv);\n        });\n    };\n    View.prototype.renderLogs = function (logs) {\n        var logContainer = document.getElementById('log');\n        if (!logContainer) {\n            console.log('error in renderLogs');\n            return;\n        }\n        logs.forEach(function (log) {\n            logContainer.innerHTML += \"\\n      <p class=\\\"text-white text-sm md:text-lg\\\">\" + log + \"</p>\\n      \";\n        });\n    };\n    View.prototype.updateStatus = function (player, status) {\n        var statusDiv = document.getElementById(player.name + '-status');\n        if (!statusDiv) {\n            console.log('error in updateStatus');\n            return;\n        }\n        if (player.isGameOver) {\n            statusDiv.innerHTML = \"<span class=\\\"rounded-full px-2 bg-red-500 shadow-lg text-white text-sm uppercase\\\">GAME OVER</span>\";\n            return;\n        }\n        if (status === 'stand') {\n            statusDiv.innerHTML = \"<span class=\\\"rounded-full px-2 bg-yellow-500 shadow-lg text-white text-sm\\\">stand</span>\";\n        }\n        else if (status === 'hit') {\n            statusDiv.innerHTML = \"<span class=\\\"rounded-full px-2 bg-blue-500 shadow-lg text-white text-sm uppercase\\\">hit</span>\";\n        }\n        else if (status === 'surrender') {\n            statusDiv.innerHTML = \"<span class=\\\"rounded-full px-2 bg-red-500 shadow-lg text-white text-sm uppercase\\\">surrender</span>\";\n        }\n        else if (status === 'double') {\n            statusDiv.innerHTML = \"<span class=\\\"rounded-full px-2 bg-purple-500 shadow-lg text-white text-sm uppercase\\\">double</span>\";\n        }\n        else if (status === 'bust') {\n            statusDiv.innerHTML = \"<span class=\\\"rounded-full px-2 bg-red-500 shadow-lg text-white text-sm uppercase\\\">bust</span>\";\n        }\n        else if (status === 'blackjack') {\n            statusDiv.innerHTML = \"<span class=\\\"rounded-full px-2 bg-gray-800 shadow-lg text-white text-sm uppercase\\\">BJ</span>\";\n        }\n        else if (status === null) {\n            statusDiv.innerHTML = \"\";\n        }\n    };\n    // ユーザーのチップを更新\n    View.prototype.updateChips = function (player) {\n        var playerMoneySpan = document.getElementById(player.name + '-money');\n        if (!playerMoneySpan) {\n            console.log('error in updateChips notFound span');\n            return;\n        }\n        if (!player.chips) {\n            console.log('error in updateChips not found chips');\n            return;\n        }\n        playerMoneySpan.textContent = String(player.chips);\n    };\n    // playerのベットを更新\n    View.prototype.updateBet = function (player) {\n        var playerBet = document.getElementById(player.name + '-betmoney');\n        if (!playerBet)\n            return;\n        if (!player.chips)\n            return;\n        // ベットが０の時はDOMを削除\n        if (player.betAmount === 0) {\n            playerBet.classList.add('hidden');\n            return;\n        }\n        playerBet.textContent = String(player.betAmount);\n    };\n    // operationを更新\n    View.prototype.updateOperation = function (player) {\n        var surrenderBtn = document.getElementById('surrender');\n        var standBtn = document.getElementById('stand');\n        var hitBtn = document.getElementById('hit');\n        var doubleBtn = document.getElementById('double');\n        if (player.getHandScore() === 21 || player.status === 'stand' || player.status === 'double' || player.status === 'surrender' || player.status === 'bust' || player.status === 'blackjack') {\n            surrenderBtn === null || surrenderBtn === void 0 ? void 0 : surrenderBtn.setAttribute('disabled', 'true');\n            standBtn === null || standBtn === void 0 ? void 0 : standBtn.setAttribute('disabled', 'true');\n            hitBtn === null || hitBtn === void 0 ? void 0 : hitBtn.setAttribute('disabled', 'true');\n            doubleBtn === null || doubleBtn === void 0 ? void 0 : doubleBtn.setAttribute('disabled', 'true');\n        }\n        else {\n            surrenderBtn === null || surrenderBtn === void 0 ? void 0 : surrenderBtn.setAttribute('disabled', 'true');\n            doubleBtn === null || doubleBtn === void 0 ? void 0 : doubleBtn.setAttribute('disabled', 'true');\n        }\n    };\n    return View;\n}());\nexports.View = View;\n\n\n//# sourceURL=webpack://brackjack/./src/views/application_view.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;